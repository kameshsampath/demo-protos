// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: affirmations/affirmations.proto

package affirmations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Affirmations_Add_FullMethodName  = "/affirmations.Affirmations/Add"
	Affirmations_List_FullMethodName = "/affirmations.Affirmations/List"
)

// AffirmationsClient is the client API for Affirmations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AffirmationsClient interface {
	Add(ctx context.Context, in *Affirmation, opts ...grpc.CallOption) (*AddResponse, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Affirmations_ListClient, error)
}

type affirmationsClient struct {
	cc grpc.ClientConnInterface
}

func NewAffirmationsClient(cc grpc.ClientConnInterface) AffirmationsClient {
	return &affirmationsClient{cc}
}

func (c *affirmationsClient) Add(ctx context.Context, in *Affirmation, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, Affirmations_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affirmationsClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Affirmations_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Affirmations_ServiceDesc.Streams[0], Affirmations_List_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &affirmationsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Affirmations_ListClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type affirmationsListClient struct {
	grpc.ClientStream
}

func (x *affirmationsListClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AffirmationsServer is the server API for Affirmations service.
// All implementations must embed UnimplementedAffirmationsServer
// for forward compatibility
type AffirmationsServer interface {
	Add(context.Context, *Affirmation) (*AddResponse, error)
	List(*emptypb.Empty, Affirmations_ListServer) error
	mustEmbedUnimplementedAffirmationsServer()
}

// UnimplementedAffirmationsServer must be embedded to have forward compatible implementations.
type UnimplementedAffirmationsServer struct {
}

func (UnimplementedAffirmationsServer) Add(context.Context, *Affirmation) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAffirmationsServer) List(*emptypb.Empty, Affirmations_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAffirmationsServer) mustEmbedUnimplementedAffirmationsServer() {}

// UnsafeAffirmationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AffirmationsServer will
// result in compilation errors.
type UnsafeAffirmationsServer interface {
	mustEmbedUnimplementedAffirmationsServer()
}

func RegisterAffirmationsServer(s grpc.ServiceRegistrar, srv AffirmationsServer) {
	s.RegisterService(&Affirmations_ServiceDesc, srv)
}

func _Affirmations_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Affirmation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffirmationsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affirmations_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffirmationsServer).Add(ctx, req.(*Affirmation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affirmations_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AffirmationsServer).List(m, &affirmationsListServer{stream})
}

type Affirmations_ListServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type affirmationsListServer struct {
	grpc.ServerStream
}

func (x *affirmationsListServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Affirmations_ServiceDesc is the grpc.ServiceDesc for Affirmations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Affirmations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "affirmations.Affirmations",
	HandlerType: (*AffirmationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Affirmations_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Affirmations_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "affirmations/affirmations.proto",
}
